name: 'Action to deploy puppet module on puppet servers'
description: 'pull the changes as per the tags'
inputs:
  repo_name:
    required: true
    type: string
  pr_changes:
    require: true
    type: string
  running_on:
    require: true
    type: string
    
runs:
  using: "composite"
  steps:
  - id: step1
    shell: bash
    name: Deploy puppet module on puppet serversas per the tags or branches
    run: |
      set -eo pipefail
      org_repo_name=${{ inputs.repo_name }}
      
      org_name=$(echo ${org_repo_name} | cut -d/ -f1) 
      repo_name=$(echo ${org_repo_name} | cut -d/ -f2)
           
      deploy_changes=${{ inputs.pr_changes }}
      running_on=${{ inputs.running_on }}
     
      echo "repo and org name is $org_repo_name"
      echo "Repo name is $repo_name"  
      echo "Changes to deploy $deploy_changes"
      
      echo "Extracting simlane and release version"
      sim_lane=$(echo $deploy_changes | cut -d: -f1)
      release_ver=$(echo $deploy_changes | cut -d: -f2)

      if [[ ${running_on} == 'tableau' ]] ; then
        puppet_servers='ndc-pupma-lp701 bdc-pupcm-lp701 ndc-pupcm-lp702'
      elif [ ${running_on} == 'bt' ]] ; then
        puppet_servers='phx-pupma-lp701 phx-pupcm-lp701 phx-pupcm-lp702'
      else
        :
      fi
      
      cd ~/git
      if [[ -d ${repo_name} ]] ;  then rm -rf ${repo_name} ; fi
      
      gh auth login --with-token < ~/.gh_secrets
      
      echo "Cloning the repo"
      gh repo clone "https://github.com/${org_repo_name}"
      
      cd ${repo_name}
      echo "I am in ${repo_name}"
      
      echo "Found the change for sim-lane ${sim_lane}, Check out the repo ${repo_name} to the deploy changes in release version $release_ver"
      
      echo "Checking out the branch based on the tag ${release_ver} or branch"

      git checkout ${release_ver}

      echo $(hostname)
      
      echo "Copying the content to the destination"
      if [[ $? == 0 ]] ; then
        for srv in ${puppet_servers}
        do
          echo $srv
        done
        cp -r * ~/environment/${sim_lane}/modules/${repo_name}/
      else
        echo 'Repository checkout was not successful, please check'
        exit 1
      fi
      
      cd ../
      
      echo "Removing the cloned repo for next processing...."
      rm -rf ${repo_name}
