name: release_manager

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
      pr_number:
        required: true
        type: string

jobs:
  processing_release_manager:
    name: collecting_release_version
    runs-on: [ self-hosted, linux, code_release ]
    steps:
    - id: step1
      name: Checking which files changed 
      run: |
      
        echo "Get the changes before we merge"
        org_repo=${{ inputs.repo_name }}
        repo_name=$(echo ${org_repo} | cut -d/ -f2)
        
        cd ~/git
        if [[ -d ${repo_name} ]] ;  then rm -rf ${repo_name} ; fi
          
        gh auth login --with-token < ~/.gh_secrets
          
        echo "Cloing the repo"
        git clone -b release "https://github.com/${org_repo}"
        
        cd ${repo_name}
        echo "I am in ${repo_name}"
        
        changes=$(git show refs/heads/release | grep -v release | grep ^+ | sed 's/+//g')
        echo ${changes}
        echo "changes_to_deploy=$(echo $changes | tr ' ' '\n' | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
        echo ${changes_to_deploy}
        exit 0
    outputs:
      changes_from_pr: ${{ steps.step1.outputs.changes_to_deploy }}

      
  processing_release_manager2:
    needs: processing_release_manager
    #if: ${{ success() && needs.processing_release_manager.outputs.file_name == 'release.txt' }}
    runs-on: [ self-hosted, linux, code_release ]
    strategy:
      matrix:
        list_of_changes: ${{ fromJSON(needs.processing_release_manager.outputs.changes_from_pr) }}
    steps:
    - id: step3
      name: call actions
      #if: ${{ success() && needs.processing_release_manager.outputs.file_name == 'release.txt' }}
      uses: pcherukusfdc/release_manager@main
      with:
        repo_name: '${{ inputs.repo_name }}'
        pr_changes: ${{ matrix.list_of_changes }}
