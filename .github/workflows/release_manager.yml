name: release_manager1

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
      pr_number:
        required: true
        type: number
     
jobs:
  processing_release_manager_1:
    if: |
      startsWith(inputs.repo_name, 'pcherukusfdc/tb') ||
      (!startsWith(inputs.repo_name, 'pcherukusfdc/tb') && !startsWith(inputs.repo_name, 'pcherukusfdc/bt'))
    name: collecting_release_version
    runs-on: [ self-hosted, linux, tableau_runner ]
    steps:
    - id: step1
      name: Checking which files changed 
      run: |
      
        echo "Get the changes before we merge"
        org_repo=${{ inputs.repo_name }}
        repo_name=$(echo ${org_repo} | cut -d/ -f2)
                 
        cd ~/git
        if [[ -d ${repo_name} ]] ;  then rm -rf ${repo_name} ; fi
          
        gh auth login --with-token < ~/.gh_secrets
          
        echo "Cloing the repo"
        git clone -b release "https://github.com/${org_repo}"
          
        cd ${repo_name}
        echo "I am in ${repo_name}"
          
        echo "Checking out the PR"
        gh pr checkout ${{ inputs.pr_number }}
        changes=$(git diff release | grep ^+ | grep -v release.txt | sed 's/+//g')
          
        echo "+++++++++++++++++++++++++++++++++++++++++++++"
        git diff release
        echo "+++++++++++++++++++++++++++++++++++++++++++++"
          
        echo ${changes}
  
        echo "changes_to_deploy=$(echo $changes | tr ' ' '\n' | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
        echo ${changes_to_deploy}
        
        if [[ ${org_repo} =~ "pcherukusfdc/tb" ]] ; then
          echo "Merging PR...."
          gh pr merge --merge
          if [ $? -ne 0 ]; then
            echo ""
            echo "PR Merger Failed!!"
            gh auth logout --hostname github.com
            echo ""
            exit 1
          else
            echo ""
            echo "PR Has Been Merged Successfully!!"
            gh auth logout --hostname github.com
          fi
        fi
    outputs:
      changes_from_pr: ${{ steps.step1.outputs.changes_to_deploy }}
      
  processing_release_manager_2:
    if: |
      startsWith(inputs.repo_name, 'pcherukusfdc/bt') ||
      (!startsWith(inputs.repo_name, 'pcherukusfdc/tb') && !startsWith(inputs.repo_name, 'pcherukusfdc/bt'))
    name: collecting_release_version_for_other
    runs-on: [ self-hosted, linux, code_release ]
    steps:
    - id: step1
      name: Checking which files changed 
      run: |
      
        echo "Get the changes before we merge"
        org_repo=${{ inputs.repo_name }}
        repo_name=$(echo ${org_repo} | cut -d/ -f2)
                
        cd ~/git
        if [[ -d ${repo_name} ]] ;  then rm -rf ${repo_name} ; fi
          
        gh auth login --with-token < ~/.gh_secrets
          
        echo "Cloing the repo"
        git clone -b release "https://github.com/${org_repo}"
          
        cd ${repo_name}
        echo "I am in ${repo_name}"
          
        echo "Checking out the PR"
        gh pr checkout ${{ inputs.pr_number }}
        changes=$(git diff release | grep ^+ | grep -v release.txt | sed 's/+//g')
          
        echo "+++++++++++++++++++++++++++++++++++++++++++++"
        git diff release
        echo "+++++++++++++++++++++++++++++++++++++++++++++"
          
        echo ${changes}
          #echo "::set-output name=changes_to_deploy::$(echo ${changes})"
        echo "changes_to_deploy=$(echo $changes | tr ' ' '\n' | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
        echo ${changes_to_deploy}
        
        echo "Merging PR...."
        gh pr merge --merge
        if [ $? -ne 0 ]; then
          echo ""
          echo "PR Merger Failed!!"
          gh auth logout --hostname github.com
          echo ""
          exit 1
        else
          echo ""
          echo "PR Has Been Merged Successfully!!"
          gh auth logout --hostname github.com
        fi

    outputs:
      changes_from_pr: ${{ steps.step1.outputs.changes_to_deploy }}
        
  processing_release_manager_actions_tableau_runner:
    if: |
      success() ||
      startsWith(inputs.repo_name, 'pcherukusfdc/tb') ||
      (!startsWith(inputs.repo_name, 'pcherukusfdc/tb') && !startsWith(inputs.repo_name, 'pcherukusfdc/bt'))
    needs: processing_release_manager_1 
    runs-on: [ self-hosted, linux, tableau_runner ]
    strategy:
      matrix:
        list_of_changes: ${{ fromJSON(needs.processing_release_manager_1.outputs.changes_from_pr) }}
    steps:
    - id: step3
      name: Deploying puppet module
      uses: pcherukusfdc/release_manager@main
      with:
        repo_name: '${{ inputs.repo_name }}'
        pr_changes: ${{ matrix.list_of_changes }}
        running_on: 'tableau'
 
  processing_release_manager_actions_bt_runner:
    if: | 
      success() ||
      startsWith(inputs.repo_name, 'pcherukusfdc/bt') ||
      (!startsWith(inputs.repo_name, 'pcherukusfdc/tb') && !startsWith(inputs.repo_name, 'pcherukusfdc/bt'))
    needs: processing_release_manager_2
    runs-on: [ self-hosted, linux, code_release ]
    strategy:
      matrix:
        list_of_changes: ${{ fromJSON(needs.processing_release_manager_2.outputs.changes_from_pr) }}
    steps:
    - id: step3
      name: Deploying puppet module
      uses: pcherukusfdc/release_manager@main
      with:
        repo_name: '${{ inputs.repo_name }}'
        pr_changes: ${{ matrix.list_of_changes }}
        running_on: 'bt'
